datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     Int                         @id @default(autoincrement())
  email                  String                      @unique
  password               String
  username               String?
  bot                    Bot?
  buyOrderConfiguration  BuyOrderConfiguration?                
  buyOrders              BuyOrder[]                
  generalConstraints     GeneralConstraints?
  contractCodeConstaints UserContractCodeCons[]
}

model Blockchain {
  id          Int        @id @default(autoincrement())
  label       String  
  abbrevation String
  provider    String
  router      String
  currency    String
  decimals    Int
  buyOrders   BuyOrder[]
  bots        Bot[]

  @@map(name: "blockchains")
}

model BuyOrderStatus {
  id        Int         @id @default(autoincrement())
  label     String      @unique
  buyOrders BuyOrder[]

  @@map(name: "buy_order_statuses")
}

model BuyOrderConfiguration {
  id                Int             @id @default(autoincrement())
  slippage          Int
  amountGiven       Float           @map(name: "amount_given")
  autoMultiplier    Float?          @map(name: "auto_multiplier")
  maxTime           Int             @map(name: "max_time")
  timeBeforeBuy     Int             @map(name: "time_before_buy")
  gasfees           Int             @map(name: "gas_fees")
  user              User            @relation(fields: [userId], references: [id])
  userId            Int             @map(name: "user_id")

  @@map(name: "buy_orders_configurations")
}

model BuyOrder {
  id                Int                   @id @default(autoincrement())
  label             String?
  address           String
  pairAddress       String                @map(name: "pair_address")
  slippage          Int
  amountGiven       Float                 @map(name: "amount_given")
  autoMultiplier    Float?                @map(name: "auto_multiplier")
  maxTime           Int                   @map(name: "max_time")
  gasfees           Int                   @map(name: "gas_fees")
  timeBeforeBuy     Int                   @map(name: "time_before_buy")
  createdAt         DateTime              @default(now()) @map(name: "created_at")
  completedAt       DateTime?             @map(name: "completed_at")
  user              User                  @relation(fields: [userId], references: [id])
  userId            Int                   @map(name: "user_id")
  blockchain        Blockchain            @relation(fields: [blockchainId], references: [id])
  blockchainId      Int                   @map(name: "blockchain_id")
  buyOrderStatus    BuyOrderStatus        @relation(fields: [buyOrderStatusId], references: [id])
  buyOrderStatusId  Int                   @map(name: "buy_order_status_id")
  logMessages       BuyOrderLogMessage[]

  @@map(name: "buy_orders")
}

model Bot {
  id             Int             @id @default(autoincrement())
  enabled        Boolean
  initialAmount  Float           @map(name: "initial_amount")
  autoMultiplier Float           @map(name: "auto_multiplier")
  maxTransaction Int             @map(name: "max_transaction")
  maxTime        Int             @map(name: "max_time")
  walletAddress  String          @map(name: "wallet_address")
  walletPrivate  String          @map(name: "wallet_private")
  slippage       Int
  user           User            @relation(fields: [userId], references: [id])
  userId         Int             @map(name: "user_id")
  blockchain     Blockchain?     @relation(fields: [blockchainId], references: [id])
  blockchainId   Int?            @map(name: "blockchain_id")
  tradeWindows   TradeWindow[]   

  @@map(name: "bots") 
}

model TradeWindow {
  id             Int            @id @default(autoincrement())
  tokenAddress   String         @map(name: "token_address")
  tokenName      String         @map(name: "token_name")
  createdAt      DateTime       @default(now()) @map(name: "created_at")
  finishedAt     DateTime?
  bot            Bot            @relation(fields: [botId], references: [id])
  botId          Int            @map(name: "bot_id")
  logMessages    LogMessage[]
  transactions   Transaction[]

  @@map(name: "trade_windows")
}

model TransactionStatus {
  id    Int                  @default(autoincrement()) @id
  label String
  transactions Transaction[]

  @@map(name: "transaction_statuses")
}

model BuyOrderLogMessage {
  id            Int         @id @default(autoincrement())
  content       String      @db.MediumText
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  buyOrder      BuyOrder    @relation(fields: [buyOrderId], references: [id]) 
  buyOrderId    Int         @map(name: "buy_order_id")

  @@map(name: "buy_order_log_messages")
}

model LogMessage {
  id            Int         @id @default(autoincrement())
  content       String
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  tradeWindow   TradeWindow @relation(fields: [tradeWindowId], references: [id]) 
  tradeWindowId Int         @map(name: "trade_window_id")

  @@map(name: "log_messages")
}

model Transaction {
  id                  Int               @id @default(autoincrement())
  tokenGiven          String?           @map(name: "token_given")
  givenAmount         Float?            @map(name: "given_amount")
  tokenReceived       String?           @map(name: "token_received")
  receivedAmount      Float?            @map(name: "received_amount")
  transactionStatus   TransactionStatus @relation(fields: [transactionStatusId], references: [id])
  transactionStatusId Int               @map(name: "transaction_status_id")
  tradeWindow         TradeWindow       @relation(fields: [tradeWindowId], references: [id])
  tradeWindowId       Int               @map(name: "trade_window_id")

  @@map(name: "transactions")
}

model GeneralConstraints {
  id                 Int             @id  @default(autoincrement())
  marketCap          Boolean         @map(name: "market_cap")
  maxCap             BigInt          @map(name: "max_cap")
  minCap             BigInt          @map(name: "min_cap")
  liquidity          Boolean         @map(name: "liquidity")
  maxLiq             BigInt          @map(name: "max_liq")
  minLiq             BigInt          @map(name: "min_liq")
  timeBased          Boolean         @map(name: "time_based")
  timeForChecks      Int?            @map(name: "time_for_checks")
  ownerRenounced     Boolean?        @map(name: "owner_renounced")
  maxLiqTokInAddress Int?            @map(name: "max_liq_tok_in_address")
  maxTokInAddress    Int?            @map(name: "max_tok_in_address")
  minNumberOfTxs     Int?            @map(name: "min_number_of_trans")
  minNumberOfHolders Int?            @map(name: "min_number_of_holders")
  user               User            @relation(fields: [userId], references: [id])
  userId             Int             @map(name: "user_id")

  @@map(name: "general_constraints")
}

model ContractCodeConstraint {
  id               Int                        @id  @default(autoincrement())
  label            String                     @unique
  desc             String
  userConfs        UserContractCodeCons[]

  @@map(name: "contract_code_constraints")
}

model UserContractCodeCons {
  id                        Int                     @id @default(autoincrement())
  label                     String  
  desc                      String?                  
  sourceCode                String                  @db.LongText @map(name: "source_code")
  avoid                     Boolean
  contractCodeConstraint    ContractCodeConstraint  @relation(fields: [contractCodeConstraintId], references: [id])
  contractCodeConstraintId  Int                     @map(name: "contract_code_constraint_id")
  user                      User                    @relation(fields: [userId], references: [id])
  userId                    Int                     @map(name: "user_id")

  @@map(name: "user_contract_code_cons")
}

//Tables not used right now. This is handled in memory for now. Will see if it is needed later on.
model Token {
  id           Int      @id @default(autoincrement())
  address      String  
  transactions Int
  holders      TokenHolder[]

  @@map(name: "tokens")
}

model Pair {
  id           Int      @id @default(autoincrement())
  address      String  
  holders      LiquidityHolder[]

  @@map(name: "pairs")
}

model LiquidityHolder {
  id          Int     @id @default(autoincrement())
  address     String  
  percentage  Float               
  pair        Pair    @relation(fields: [pairId], references: [id])
  pairId      Int     @map(name: "pair_id")

  @@map(name: "liquidity_holders")
}

model TokenHolder {
  id          Int     @id @default(autoincrement())
  address     String  
  percentage  Float               
  token       Token   @relation(fields: [tokenId], references: [id])
  tokenId     Int     @map(name: "token_id")

  @@map(name: "token_holders")
}